     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 FD                          a db -3
    15 00000001 FE                          b db -2
    16 00000002 0500                        c dw 5
    17 00000004 0A000000                    e dd 10
    18 00000008 8200000000000000            x dq 130
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                  start:
    23                                      ;(a-b+c*128)/(a+b)+e-x; a,b-byte; c-word; e-doubleword; x-qword
    24 00000000 A0[00000000]                mov al, [a]
    25 00000005 2A05[01000000]              sub al, [b]
    26 0000000B 6698                        cbw
    27 0000000D 6689C3                      mov bx, ax
    28 00000010 66A1[02000000]              mov ax, [c]
    29 00000016 66B98000                    mov cx, 128
    30 0000001A 66F7E9                      imul cx
    31 0000001D 6601D8                      add ax, bx ;a-b+c*128 in ax
    32 00000020 6689C1                      mov cx, ax
    33 00000023 B800000000                  mov eax, 0
    34 00000028 A0[00000000]                mov al, [a]
    35 0000002D 0205[01000000]              add al, [b]
    36 00000033 6698                        cbw
    37 00000035 6689C3                      mov bx, ax
    38 00000038 6689C8                      mov ax, cx
    39 0000003B 66F7FB                      idiv bx
    40 0000003E 6699                        cwd
    41 00000040 0305[04000000]              add eax, [e]
    42 00000046 99                          cdq
    43 00000047 2B05[08000000]              sub eax, [x]
    44 0000004D 1B15[0C000000]              sbb edx, [x+4]
    45                                      
    46                                      ; exit(0)
    47 00000053 6A00                        push dword 0         ; push the parameter for exit onto the stack
    48 00000055 FF15[00000000]              call [exit]            ; call exit to terminate the program
    49                                  
    50                                  

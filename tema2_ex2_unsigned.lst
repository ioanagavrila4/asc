     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 03                          a db 3
    15 00000001 02                          b db 2
    16 00000002 0500                        c dw 5
    17 00000004 0A000000                    e dd 10
    18 00000008 8200000000000000            x dq 130
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; (a-b+c*128)/(a+b)+e-x; a,b-byte; c-word; e-doubleword; x-qword
    24 00000000 B800000000                      mov eax, 0
    25 00000005 BA00000000                      mov edx, 0
    26 0000000A 8A1D[00000000]                  mov bl, [a]
    27 00000010 2A1D[01000000]                  sub bl, [b]
    28 00000016 B700                            mov bh, 0
    29 00000018 66A1[02000000]                  mov ax, [c]
    30 0000001E 66B98000                        mov cx, 128
    31 00000022 66F7E1                          mul cx
    32 00000025 66B90000                        mov cx, 0
    33 00000029 6601D8                          add ax, bx ;ax = (a-b+c*128)
    34                                          ;mov bx, ax
    35 0000002C BB00000000                      mov ebx, 0
    36 00000031 8A1D[00000000]                  mov bl, [a]
    37 00000037 021D[01000000]                  add bl, [b]
    38 0000003D F6F3                            div bl
    39 0000003F 0305[04000000]                  add eax, [e]
    40 00000045 BB00000000                      mov ebx, 0
    41 0000004A 8B1D[08000000]                  mov ebx, [x]
    42 00000050 8B0D[0C000000]                  mov ecx, [x+4]
    43 00000056 29D8                            sub eax, ebx
    44 00000058 19CA                            sbb edx, ecx
    45                                          
    46                                          
    47                                          ; exit(0)
    48 0000005A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 0000005C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
